version: '3.8'
# TODO Pass credentials as environment variables https://morioh.com/a/3fe99c4391e4/build-spring-microservices-and-dockerize-them-for-production https://habr.com/ru/articles/712628/
# TODO Spring State Machine
services:
  back:
    image: back:latest
    build:
      context: ./services/back
      dockerfile: production.Dockerfile
    restart: always
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/sb3_react?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8080/actuator/health || exit 1
      start_period: 3s
      interval: 30s
      timeout: 10s
      retries: 3
  frontend:
    image: frontend:latest
    build:
      context: ./services/frontend
      dockerfile: production.Dockerfile
    restart: always
    ports:
      - "8081:80"
    volumes:
      - /app/node_modules
      - ./.frontend:/app
    depends_on:
      sb3-backend:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:80
      start_period: 3s
      interval: 30s
      timeout: 10s
      retries: 3
  db:
    image: postgres:16.1
    environment:
      POSTGRES_USER: 'root'
      POSTGRES_PASSWORD: 'gjkybrjd'
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
      - ./services/back/src/main/resources/db/script/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d sb3_react" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
  # TODO test Apache Kafka https://habr.com/ru/articles/742786/
  # TODO spring-cloud-stream-kafka упрощает работу с кафкой
  # TODO zookeeper -> raft официальная рекомендация с необходимостью миграции
  kafka:
    image: confluentinc/cp-kafka:6.2.4
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-topics-generator:
    image: confluentinc/cp-kafka:6.2.4
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic email-confirmation --replication-factor 1 --partitions 2
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.4
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

volumes:
  db:
    driver: local